/************************************************
* findreplace_help.scala
************************************************/
// ü
// Generated by findreplace, do not edit!
package de.jvr
object Help {
	val helphtml = "<html><h2>Findreplace Hilfe</h2><a name=\"oben\"><h2>Inhalt:</h2></a><a href=\"#news\">Letzte Änderungen / Erweiterungen</a><br><br><a href=\"#todo\">TODO / Ideen</a><br><br><a href=\"#versions-historie\">Versions-Historie</a><br><br><h2><a href=\"#oben\">&uarr;</a><a name=\"news\">Letzte Änderungen / Erweiterungen</a></h2>siehe auch <a href=\"#versions-historie\">Versions-Historie</a><br><br><h2><a href=\"#oben\">&uarr;Default-Ordner und Dateiname der Konfigurationsdatei geändert</a>.</h2>Default-Ordner und Dateiname der Konfigurationsdatei geändert in: \"Heimatverzeichnis des Nutzers\\findreplace\\findreplaceconfig.xml\"<br><br><br><h2>Programmbeschreibung</h2>Findreplace ist eine Programm mit dem man Inhalte von Text-Dateien umformen kann.<br>Durch Befehle in einer Steuer-Datei, werden Teile des Inhalts der Quell-Datei (source) unter Anwendung regulärer Ausdrücke verändert<br>und in der Ziel-Datei (target) oder wieder der Quell-Datei gespeichert.<br><br>Eine weitere Befehlsklasse (\"extract\"-Befehle) erlaubt es, Teile des Inhalts der Quell-Datei in eine andere, bereits bestehende Ziel-Datei einzufügen.<br>Andere Befehlsklassen sind in Vorbereitung.<br><br>Die meisten Operationen sind nur auf jeweils eine Zeile anwendbar (wiederholt für alle Zeilen der Quelle).<br>Bei Bezug auf mehrere Zeilen [vorangestelltes \"(?s)\"] wird die ganze Quelle als ein einzige Zeile aufgefasst.<br><br>Die Steuer-Datei kann im \"ISO8859-1\" (ASCII / ANSI) oder \"UTF-8\" Format vorliegen,kann also z. B. mit notepad ++ ,dem notepad2 von Windows 7 oder \"Simped\" erstellt werden (UTF-8 ohne BOM / ohne Signatur).<br><br>Die Umformung geschieht mittels Suchen (<a href=\"http://www.danielfett.de/internet-und-opensource,artikel,regulaere-ausdruecke\" target=\"regaus\">regulärer Ausdruck)</a> und Ersetzen (Festwert bzw. Wert aus der Kommandozeile)<br> <br> Die primären Befehlspaare lauten \"find=\" und \"replace=\".\"find=\" sucht den Text, dieser wird jeweils durch den Text hinter dem folgenden \"replace=\" ersetzt, normalerweise zeilenweise,<br>im gesamten Text der Quell-Datei, wobei der jeweils folgenden find/replace-Befehlspaare auf dem Ergebnis der vorigen Paare arbeiten (Im Prinzip eine Und-Verknüpfung).<br><br>Damit lässt sich eine Klasse von Umformungen (Anwendungklasse) durchführen.<br>Weitere Befehle sind vorhanden, s.u. um die Anwendungklasse zu vergrössern.<br>Tipp: Ein vorangestelltes \"(?m)\" ändert die Bedeuteung von \"^\" in Zeilenanfag und \"$\" in Zeilenende, statt Quell-Anfang bzw. -Ende.<br><br>Sehr einfaches Beispiele aus der Anwendungklasse:<br><br>Eine reine Textdatei in das HTML5-Format konvertieren.<br>Die relativ kurze Steuerdatei (\"findreplace.frpl\") macht folgendes:<br>- Einfügen des Kopfes (Header) und des Kopf-Endes mit dem Befehlen \"before=\" und \"behind=\",<br>- Ersetzen einiger in HTML5 reservierter Zeichen durch \"character entities\" (ist hier nicht vollständig, da nur eine Demo...)<br>- Einfügen eines HTML Zeilenumbruchs an Stellen, an denen ein Whitespace/Zeilenumbruch vorkommt.<br>Der reguläre Ausdruck (siehe auch: <a href=\"http://www.vogella.com/articles/JavaRegularExpressions/article.html\" target=\"javaregular\">JavaRegularExpressions</a>) dafür ist \"\\s+\".<br><br>- Einfügen von Zeilenumbrüchen, damit man den Quelltext besser lesen kann, falls man da tun möchte.<br>- es wird aus der Datei \"in.txt\" gelesen, und in die Datei \"out.html\" ausgegeben, die man sich dann auch mit einem Browser ansehen kann.<br><br>Die Endung \"*.frpl\" als Steuerdateiname ist nicht zwingend, es kann jederzeit auch z.B. \"*.txt\" verwendet werden.<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># Steuerdatei für findreplace## Testdatei in HTML5-Format wandeln###command=autoexitcommand=nobackupsource=in.txttarget=out.htmlfileencoding=auto# convert some reserved characters to character entities# is not complete!find=&amp;replace=&amp;amp;find=&lt;replace=&amp;lt;find=&quot;replace=&amp;quot;find=&quot;replace=&amp;quot;# html new linesfind=\\s+replace=&lt;br /># &quot;beautify&quot;: insert newlinesfindc=&lt;br />replacec=&lt;br />before=&lt;body>before=&lt;/head>before=&lt;meta charset=&quot;utf-8&quot;>before=&lt;head>before=&lt;html>before=&lt;!DOCTYPE html>behind=&lt;/body>behind=&lt;/html>  </i>Aus \"in.txt\":<pre class=\"brush: scala; collapse: true; smart-tabs: true\">Test&quot;&quot;&lt;</i>wird dann:\"out.html\":<pre class=\"brush: scala; collapse: true; smart-tabs: true\">&lt;pre class=&quot;brush: scala; collapse: true; smart-tabs: true&quot;>Test&amp;quot;&amp;quot;&amp;lt;&lt;/pre></i><h2>Letzte Änderungen / Erweiterungen</h2><b>Achtung: Das Programm ist noch in der Entwicklung. Befehle können sich noch ändern/angepasst werden!</b><br><br><b>Version: 0.935</b><br><h2><a href=\"#oben\">&uarr;</a>Neue Befehle \"writeextractg, writeextractgc, writeextractgadd, \"writeextractgaddc\": </h2>Extrahieren ein bis neun Gruppen pro Zeile aus der Quelldatei.<br>(..add fügt den Inhalt an die Zieldatei an)<br><br>An der Einfügeposition ist anzugeben:<br><br>\"%s1\" für die 1. Gruppe<br>\"%s2\" für die 2. Gruppe<br>usw....<br>\"%s9\" für die 9. Gruppe<br><br>Beispiel:<pre class=\"brush: scala; collapse: true; smart-tabs: true\">findextract=&lt;td class=&quot;hotkey_key_td&quot;>(.*)?&lt;/td>(?:.*)?&lt;pre>(.*)?&lt;/pre>writeextractadd=%s1: %s2Ist der Text: <td class=\"hotkey_key_td\">STRG + s</td></tr><tr class=\"hotkey_tr\"><td class=\"hotkey_td\"><i>Aktive Datei speichern [save].</i>wird daraus in der Zieldatei:STRG + s: Aktive Datei speichern [save].Tipp: (?:...) bedeutet: Gruppe wird nicht als Gruppe interpretiert!Die Befehle \"writeextract, writeextractc, writeextractadd, \"writeextractaddc\" behalten ihre alte Funktion,verwenden also \"%s\" als Platzhalter.</i><hr><b>Version: 0.927</b><br>Die Konfigurations-Datei \"config.xml\" kann sich jetzt auch im Ordner aus dem \"Findreplace.exe\" gestartet wird befinden.<br>Neuer Parameter \"silent\" in der Konfigurations-Datei unterdrückt das Programmfenster.<br><br><b>Version: 0.923</b><br>Neuer Befehl \"findcc= /replacecc=\".<br>Der erste Buchstabe des Ersatz-Textes wird in einen Großbuchstaben umgewandel (cc = Camelcase).<br><br><b>Version: 0.921</b><br>2 neue Befehle: \"command=sound, \"command=nosound\"<br><br><b>Version: 0.920</b><br>Neuer Befehl: \"writedateformat\" / \"writedateadd\"<br>Ab Version 0.922 Befehle umbenannt in: \"writeextractdateformat\" / \"writeextractdateadd\"<br><br>Fügt das formatierte Tagesdatum/Uhrzeit ein. Nur in Verbindung mit \"extract\"-Befehlen verwendbar.<br>\"writeextractdateformat=\" gibt das Format des Datums an und zwar im <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" target=\"sdf\">SimpleDateFormat</a>\"writeextractdateadd\" schreibt dann das formatierte Datum und zwar an der mit \"%s\" gekennzeichneten Stelle.<br><br>Einfaches Beispiel:<br><i>writeextractdateformat=dd.MM.yyyywriteextractdateadd=Datum %s</i><br>Komplettes Beispiel:<br>Es soll der Stand des Jackpots der Kassler Spielbank täglich ausgelesen werden (von der Webseite).<br>(Automatisch mittels Windows Aufgabenplanung, also ein Cron-Job sozusagen)Da das Datum (Stand) seit heute nicht mehr veröffentlicht wird, habe ich obige Befehle in die Steuerdatei eingefügt und die alte Datumsabfrage auskommentiert:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># Steuerdatei für findreplace### Jackpot der Spielbank Kassel##command=autoexitcommand=nobackupsourceURL=http://www.spielbank-kassel.de/jackpots.phptarget=sbk_jackpot.txtfind=&lt;!--(.*?)-->replace=#findextract=(?s)&lt;p>&lt;em>Stand:.*?(\\d{1,2}\\.\\d{1,2}\\.\\d{2,4})&lt;br/>#writeextractadd=Datum: %s,writeextractdateformat=dd.MM.yyyywriteextractdateadd=Datum %s		findextract=(?s)&lt;h3>Kurf&amp;uuml;rsten Galerie&lt;/h3>.*?&lt;p>CASH RUNNER&lt;br/>.*?€ (\\d+.\\d+),-writeextractaddc=, CASH RUNNER: %s</i>Die Ausgabedatei ist \"sbk_jackpot.txt\".<br>Die erzeugte Datei sieht dann so aus:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">Datum: 21.01.2014,CASH RUNNER: 34.888Datum: 22.01.2014,CASH RUNNER: 35.030Datum: 23.01.2014,CASH RUNNER: 35.240Datum: 26.01.2014,CASH RUNNER: 35.775Datum: 27.01.2014,CASH RUNNER: 36.250Datum: 28.01.2014,CASH RUNNER: 36.356Datum: 29.01.2014,CASH RUNNER: 37.281Datum: 30.01.2014,CASH RUNNER: 37.625Datum: 30.01.2014,CASH RUNNER: 37.625Datum: 02.02.2014,CASH RUNNER: 38.721Datum: 03.02.2014,CASH RUNNER: 39.009Datum: 04.02.2014,CASH RUNNER: 39.372Datum: 05.02.2014,CASH RUNNER: 39.527Datum: 06.02.2014,CASH RUNNER: 39.880Datum: 09.02.2014,CASH RUNNER: 40.850Datum: 10.02.2014,CASH RUNNER: 41.270Datum: 10.02.2014,CASH RUNNER: 41.270Datum: 13.02.2014,CASH RUNNER: 41.854</i><br><h2>Da wird ordentlich Geld \"verbrannt!\"</h2><b>Version: 0.919</b><br>Befehl: \"command=newline\" wieder entfernt!<br>Stattdessen 2 neue Befehle: \"writeextractc\" und \"writeextractaddc\", diese erzeugen jeweils auch einen Zeilenvorschub.<br><br><b>Version: 0.918</b><br>Neuer Befehl: \"command=newline\". Bei \"*extract\"-Befehlen wird in der Ausgabe ein Zeilenvorschub angehängt.<br><b>Version: 0.912</b><br>Neuer Befehl: \"replaceextractonly=\",<br>gepaart mit \"findextract=\".<br><br>Pro \"*.frpl\"-Datei sind dann nur diese Art Befehlspaare erlaubt.<br>Die Ziel-Datei muss bereits vorhanden und natürlich schreibbar sein.<br>Mit \"findextract=\" muss eine Gruppe definiert werden.<br>Deren Inhalt (der \"Extract-Inhalt\") wird kopiert.<br>Mit \"replaceextractonly=\" müssen dann 3 Gruppen definiert werden:<br>Die 1. Gruppe definiert die Stelle (der \"Anker\"), nach der der \"Extract-Inhalt\" in der Zieldatei eingesetzt wird.<br>Die 2. Gruppe muss die \"Signatur\" der beim \"findextract=\"-Befehl definierten Gruppe haben, damit der alte eingefügte \"Extract-Inhalt\" beim nächsten Einfügen ersetzt wird.<br>Die 3. Gruppe definiert den restlichen Inhalt der Zeile, falls ein solcher vorhanden ist, andernfalls muss eine Leergruppe \"()\" angegeben werden.<br>Die Zieldatei muss bereits eine Zeile dieser Struktur enthalten, also auch schon einen \"alten\" \"Extract-Inhalt\".<br>Multiline Operation sind dabei nicht möglich!<br>Man kann aber 2 \"findreplace\"-Operationen nacheinander ausführen (siehe 3. Beispiel)<br>Findet \"findextract\" mehrfach passende Stellen, wird nur die letzte verwendet!<br><br>Zu beachten:<br>- Zeichen mit besonderer Bedeutung in regulären Ausdrücken müssen dabei dann maskiert werden!<br>- Der eingefügte Wert muss per regulärem Ausdruck von den beiden anderen Gruppen unterscheidbar sein,<br>da es sonst beim wiederholten Einfügen \"Kuddelmuddel\" gibt. Das geht sehr einfach, falls Zahlen eingefügt werden sollen (siehe Beispiel).<br>Es kann aber ein Problem sein, wenn man nicht genau weiß, was eingefügt wird. Eine Möglichkeit besteht darin, die 1. und 3. Gruppe durch ein Sonderzeichen,welches man später wieder entfernt, eindeutig zu machen. Dann müsste man aber mit einer temporären Datei, einer weiteren Steuer-Datei und zwei Findreplace-Programmaufrufen arbeiten.<br>- Die Leerzeichen müssen natürlich auch ganz genau stimmen!<br>- Folgt dem eingefügten Inhalt kein weiterer Inhalt auf der Zeile, so muss als 3. Gruppe eine Leergruppe \"()\" angegeben werden.<br><br> 1. Beispiel:<br>Die Programm-Versionsnummer soll aus dem Programm-Quellcode ausgelesen und in die Webseite eingesetzt werden.<br>Die Datei der Webseite hat folgenden Inhalt:<pre class=\"brush: scala; collapse: true; smart-tabs: true\">&lt;div>&lt;li>simped, Version 0.093 (minor)&lt;/li>&lt;li>findreplace, Version 0.911 (minor)&lt;/li>&lt;li>all_sources, Version 0.67&lt;/li>&lt;li>pwghost, Version 0.36&lt;/li>&lt;li>pwgen, Version 0.25&lt;/li>&lt;li>skatcash, Version 0.939&lt;/li>&lt;/div></i>Steuerdatei hierzu \"version.frpl\":<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">## Steuerdatei für findreplace##command=autoexitcommand=nobackupsource=simped_gui.scalatarget=C:\\_Workspaces\\workspaces2012\\jvr\\src\\main\\webapp\\tools\\_versions.htmlfileencoding=autofindextract=val version = &quot;(\\d+\\.\\d+)&quot;replaceextractonly=(&lt;li>simped, Version )(\\d+\\.\\d+)( \\(minor\\)&lt;/li>)</i><br>Wie man sieht, sind die Klammer-Zeichen bei \"minor\" maskiert.<br><br>Nach dem Klick auf \"version.frpl\" wird die Zeile \"&lt;li>findreplace...\"<br>zu<br>&lt;li>findreplace, Version 0.912 (minor)&lt;/li><br><br>Zum Automatisieren des Vorgangs wird dann nur noch \"@findreplace.exe version.frpl\" in die make-Datei eingetragen.<br>(und das Kommentarzeichen vor \"command=autoexit\" entfernt...)<br><br><a href=\"#regextips\">Tips zu regulären Ausdrücken siehe weiter unten.</a><br><br>2. Beispiel zu \"findextract= / writeextract=\" bzw. \"findextract= / replaceextractonly=\":<br>Es geht darum die von SBT verwalteten Bibliotheken in die Steuerdatei, hier \"dirsaver.exe4j\" (im XML-Format) für den EXE4J-Wrapper zu bringen.<br>(Das Programm ist \"dirsaver.exe\").<br>Dazu wird benötigt:<br>Das \"findreplace\"-Programm.<br>Weiterhin sind 5 Dateien daran beteiligt:<br>Eine Batch-Datei \"classpath_for_exe4j.bat\" folgenden Inhalt:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">sbt packagesbt &quot;show full-classpath&quot; > classpath_for_exe4j.tmpfindreplace classpath_for_exe4j.frplfindreplace classpath_into_exe4j.frpl</i>Die von der Batchdatei erzeugte temporäre Zwischendatei enthält die gewünschten Informationen,<br>aber in einem ganz falschen Format:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">[info] Set current project to dirsaver (in build file:/C:/_SCALA/sbt_learn/dirsaver/)[info] List(Attributed(C:\\_SCALA\\sbt_learn\\dirsaver\\target\\scala-2.10\\classes), Attributed(c:\\program files (x86)\\java\\jre7\\lib\\jfxrt.jar), Attributed(lib_0\\javafx-dialogs-0.0.3.jar), Attributed(C:\\Users\\jvr\\.sbt\\boot\\scala-2.10.3\\lib\\scala-library.jar), Attributed(C:\\Users\\jvr\\.ivy2\\cache\\org.scalafx\\scalafx_2.10\\jars\\scalafx_2.10-1.0.0-M7.jar), Attributed(C:\\Users\\jvr\\.ivy2\\cache\\com.typesafe.akka\\akka-actor_2.10\\jars\\akka-actor_2.10-2.3-M2.jar), Attributed(C:\\Users\\jvr\\.ivy2\\cache\\com.typesafe\\config\\bundles\\config-1.0.2.jar))[success] Total time: 1 s, completed 06.02.2014 20:33:28</i>Im ersten Schritt wird der Inhalt mittels \"findreplace\" und der Steuerdatei \"classpath_for_exe4j.frpl\"<br>umgeformt und in die zweite temporäre Zwischendatei \"classpath_for_exe4j.txt\" ausgegeben.<br>\"classpath_for_exe4j.frpl\":<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># findreplace Steuerdateicommand=nobackup#command=autoexitcommand=newlinefile=classpath_for_exe4j.tmptarget=classpath_for_exe4j.txtfileencoding=UTF-8find=\\)\\)replace=),findc=,replacec=,find=\\[info\\].*replace=findextract=Attributed\\((.*?)\\),writeextract=&lt;archive location=&quot;%s&quot; failOnError=&quot;true&quot; /># jar des eigentlichen Programms!behindextract=&lt;archive location=&quot;C:\\_SCALA\\sbt_learn\\dirsaver\\target\\scala-2.10\\dirsaver_2.10-0.1-SNAPSHOT.jar&quot; failOnError=&quot;true&quot; /></i>Dort sind dann schon alle Bibliotheken im Format:<br>&lt;archive location=\"...\" failOnError=\"true\" /><br>aufgelistet.<br>Jetzt müssen sie noch in die EXE4J-Steuerdatei \"dirsaver.exe4j\" an der richtigen Stelle eingesetzt werden.<br>Das erledigt der letzte Schritt mittel \"findreplace\" und der Steuerdatei \"classpath_into_exe4j.frpl\" mit dem Inhalt:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># findreplace Steuerdateicommand=nobackup#command=autoexitcommand=newlinefile=classpath_for_exe4j.txttarget=dirsaver.exe4jfileencoding=UTF-8findextract=(?s)(&lt;archive.*/>)replaceextractonly=(?s)(&lt;classPath>)(.*)(&lt;/classPath>)</i><b>Man beachte die \"(?s)\" Modifizierer.</b> Diese sind notwendig, da sich die Operationen auf mehrere Zeilen beziehen!<br>Weiterhin wird noch die erzeugte Programm-Bibliothek per \"behindextract=\" eingefügt.<br><br>Die geänderte \"dirsaver.exe4j\" kann bei Bedarf noch mit \"Simped\"-XML-Autoformatierung \"geschönt\" werden, was aber für eine korrekte Funktionnicht notwendig ist.<br><br>3. Beispiel zu \"findextract= / replaceextractonly=\":<br><br>Es sollen Teile eines Programms durch den Inhalt einer externen Datei ersetzt werden.<br>Da \"replaceextractonly=\" nur auf einer Zeile arbeiten kann, muss der vorherige Inhalt der bei Änderungen überschrieben werden soll zunächst komplett entfernt werden.<br>Mittels der Batchdatei \"config_simped_help.bat\" werden die Dateien \"config_simped_help1.frpl\" und \"config_simped_help2.frpl\" nacheinander aufgerufen:<br>findreplace config_simped_help1.frpl<br>findreplace config_simped_help2.frpl<br><br>Die Datei \"config_simped_help1.frpl\":<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># findreplace Steuerdateicommand=nobackupcommand=autoexitfile=simped.scalatarget=simped.scalafileencoding=autofind=(?s)val config_simped_help = &quot;&quot;&quot;.*?&quot;&quot;&quot;replace=val config_simped_help = &quot;&quot;&quot; &quot;&quot;&quot;</i>löscht einfach alles innerhalb der Triple-Quotes.<br><br>Mit der Steuerdatei \"config_simped_help2.frpl\" wird dann der neue Inhalt aus der Datei \"simped_help.html\" an dieser Stelle eingefügt:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># findreplace Steuerdateicommand=nobackupcommand=autoexitfile=simped_help.htmltarget=simped.scalafileencoding=autofindextract=(?s)(.*)replaceextractonly=(config_simped_help = &quot;&quot;&quot;)(.*)(&quot;&quot;&quot;)</i>Die Datei \"simped_help.html\" ist Teil der Webseite. (Sie darf natürlich dann keine Tripple-Quotes enthalten!)<br><br>Auf diese Weise werden die Änderungen auch im Quelltext des Programms (im Beispiel ist es \"Simped\") \"auf Tastendruck\" eingefügt.<br> <br><b>Version: 0.906</b><br>Variablen-Substitution in der Steuer-Datei<br><br>Ich hatte folgendes Problem:<br><br>Eine ganze Reihe von Programm-Quelltext-Dateien sollte zur Anzeige auf der Webseite automatisch ins HTML-Format umgewandelt werden.<br>Dazu müsste ich für jede der Programm-Quelltext-Dateien eine eigenen findreplace-Steuer-Datei erstellen,<br>die bis auf 3 Zeilen (source/Quell-Datei, target/Ziel-Datei und Dateiname in einer Zeile) identisch wären.<br><br>Um die zu vermeiden habe ich ein Möglichkeit in findreplace eingebaut, in der Steuer-Datei Variablen zu verwenden.<br>Mit der Anweisung: \"set=Variable~Wert~Filter\" in der Steuer-Datei, wird der Variable der Wert \"Wert\" als Default-Wert zugewiesen.<br>Von aussen kann die Variable beim Aufruf von findreplace.exe auf der Kommandozeile mit der gleichen Anweisung gesetzt werden.<br>Der Wert darf allerdings keine Leerzeichen enthalten!<br>Werden Leezeichen benötigt, so kann man sie durch einen Platzhalter ersetzen, z.B. \"_blank_\".<br><br>Diesen Platzhalter kann man dann mit einem Befehl am Ende der Steuerdatei gegen Leerzeichen ersetzen:find=_blank_<br>replace= (Ein Leerzeichen dahinter)<br><br><b>Die Variablennamen sollten mit einem Unterstrich beginnen und enden, sodaß sie vom Rest des Textes unterschieden werden können.</b><br><br>Beispiel:<br>Es sei \"findreplace.frpl\" die Steuer-Datei.<br>Diese enthalte:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">#command=autoexitcommand=nobackupcommand=nosoundset=_name_~XYZ~.+set=_name1_~1~\\d+file=in.txttarget=out.txtfileencoding=UTF-8#_name_#_name1_#_name#name_#name</i><br>\"in.txt\" muss vorhanden sein (leer...)<br><br>Ruft man auf der Kommandozeile auf:<br><br>findreplace test.frpl set=_name_~test~.+ set=_name1_~2~\\d+<br>bedeutet:<br>ersetze die Variabel _name_ mit \"test\", der Filter \".+\" bedeutet ein oder mehrere beliebige Zeichen,und<br>ersetzte die Variabel _name1_ mit \"2\", der Filter \"\\d+\" bedeutet ein- oder mehr-stellige Zahlen (0 bis 9).<br><br>Klickt man dann im \"Findreplace\" auf den Tab Control-File,<br>so sieht man (hier nur in den Kommentarzeilen unten) dass alles richtig ersetzt wird:<br>﻿<pre class=\"brush: scala; collapse: true; smart-tabs: true\">﻿#command=autoexitcommand=nobackupcommand=nosound# Default-Werte setzen, falls keine Parameter übergeben werden:set=_name_~XYZ~.+set=_name1_~1~\\d+file=in.txttarget=out.txtfileencoding=UTF-8#test#2#_name#name_#name</i><b>Dabei ist zu beachten:</b><br>- das \"Findreplace\"-Programm muss expliziet aufgerufen werden, d.h.<br><br>findreplace test.frpl set=_name_~test~.+ set=_name1_~2~\\d+<br><br>funktioniert (\"findreplace.exe\" ist im Pfad), aber nur<br><br>test.frpl set=_name_~test~.+ set=_name1_~2~\\d+<br><br>funktioniert nicht!<br>- Es dürfen innerhalb der set-Anweisung <b>keinerlei Leerzeichen vorhanden sein, auch nicht im \"Ersatz-Text\"</b> (s.o.).<br>- Die Variable ist ein regulärer Ausdruck, d.h. dafür keine Sonderzeichen verwenden, es sei denn, man weiß was man macht.<br>- Das Zeichen \"~\" darf natürlich in der Variable auch nicht vorkommen, Unterstrich ist aber erlaubt und muss zur Abgrenzung eingesetzt werden!<br>- Die Variable wird überall in der Steuer-Datei ersetzt.<br>- Das Backslash-Zeichen (\"\\\") muss auf der Kommandozeile verdoppelt werden (\"escaped\"), also bei Angabe kompletter Pfade,<br>z.B. statt: <br>findreplace test.frpl set=_dateiname_~c:\\ordner1\\ordner2\\datei~.+<br>ist:<br>findreplace test.frpl set=_dateiname_~c:\\\\ordner1\\\\ordner2\\\\datei~.+<br>zu verwenden.<br><br>Die Bedeutung des \"Filters\":<br>Mit dem Filter werden die übergebenen Werte für \"Wert\" gefiltert.<br>\".*\" steht dabei für \"ungefiltert\". <b>Der Filter darf nicht weggelassen werden, er kann aber leer sein: \"()\".</b><br>Es handelt sich dabei um einen regulären Ausdruck.<br><br>Beispiel:<br><br>Die Batch-Datei \"_gen_all_html.bat\" mit folgendem Inhalt:<br><br><i>@for %%i in (&quot;i_*.txt&quot;) do ...</i>liefert mir alle Dateinamen im Ordner die dem Schema \"i_1.txt\", \"i_2.txt\"...\"i_120.txt\" usw. folgen.<br><br>Für die Weiterverarbeitung mit \"findreplace.exe\" benötige ich die Zahlen aus den Dateinamen.<br><br>Der Filter \"\\d+\" extrahiert mir alle Zahlen (eine Stelle oder mehr) aus den Dateinamen. <br><br>Die Control-Datei \"gen_html_from_i.frpl\":<pre class=\"brush: scala; collapse: true; smart-tabs: true\">command=autoexitcommand=nobackupset=_number_~1~\\d+file=i__number_.txttarget=C:\\_Workspaces\\workspaces2012\\jvr\\src\\main\\webapp\\scalamemos\\_scalafx_test_source__number_.htmlfileencoding=UTF-8find=&amp;replace=&amp;amp;find=&lt;replace=&amp;lt;find=&quot;replace=&amp;quot;find=&quot;replace=&amp;quot;#find=\\n#replace=&lt;br />before=&lt;div>&lt;table class=&quot;source_table&quot;>&lt;tr class=&quot;source_key_tr&quot;>&lt;td class=&quot;source_key_td&quot;>&quot;i__number_.txt&quot;&lt;/td>&lt;/tr>&lt;tr class=&quot;source_tr&quot;>&lt;td class=&quot;source_td&quot;>&lt;pre class=&quot;brush: scala; collapse: true;smart-tabs: true&quot;>behind=&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div></i>enthält an mehreren Stellen die Variable \"_number_\".<br><br>Die fertige Batch-Datei \"_gen_all_html.bat\" muss also dann so aussehen:<br><br><i>@for %%i in (&quot;i_*.txt&quot;) do findreplace.exe gen_html_from_i.frpl set=_number_~%%i~\\d+</i>Damit erhalte ich dann jeweils für eine Programm-Quell-Datei die entsprechenden HTML-Datei, also<br>\"_scalafx_test_source_1.html\", \"_scalafx_test_source_2.html\" usw.<br>(Diese bindet Lift dann jeweils per &lt;lift:embed what=&quot;/scalamemos/_scalafx_test_source_1&quot;>&lt;/lift:embed> in die Webseite ein).<br>Nachtrag:<br>Bei Verwendung des Default-Steuer-Datei-Namens \"findreplace.frpl\" anstelle von \"gen_html_from_i.frpl\" könnte der Befehl<br>natürlich gekürzt werden zu: <br><br><i>@for %%i in (&quot;i_*.txt&quot;) do findreplace.exe set=_number_~%%i~\\d+</i><br>Variablen-Substitution kann für alle Befehle in der Steuerdatei verwendet werden.<br><br>Beispiel:<br><br>In einem Ordner befindet sich die Datei \".gitignore\".<br>Sie soll -jeweils angepasst- in einige Unterordner dieses Ordners kopiert werden.<br><br>In der Batch-Datei \"gitignore_verteilen.bat\" wird dazu findreplace jeweils mit einem der 5 Unterordner Namen als Variable aufgerufen:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">@rem gitignore_verteilen.bat@echo offfor %%n in (simped dirsaver findreplace scalafx scalaquick ) do (	echo %%n	findreplace gitignore_verteilen.frpl set=_name_~%%n~.+)</i>Die Datei \"gitignore_verteilen.frpl\" verwendet die Variable \"_name_\" auch im \"target\"-Befehl (und bei findc=...).Dadurch wird eine Zeile der Datei \".gitignore\" jeweils geändert und die Datei in den jeweiligen Unterordner kopiert.<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># findreplace Steuerdatei# gitignore_verteilen.frplcommand=nobackupcommand=autoexitset=set=_name_~ERROR~.+file=.gitignoretarget=_name_\\.gitignorefileencoding=UTF-8findc=UNTER-ORDNER/replacec=_name_/</i>Weitere Beispiele für Befehle folgen weiter unten...<br><br><h2>Installation unter Windows (ab Vers. 7)</h2> Die ZIP-Datei in einen beliebigen Ordner entpacken.<br> <br>\"INSTALL_findreplace.bat\" ausführen (Windows): <br> Der Installer erstellt einen Startmenüeintrag.<br> Es werden die Default-Dateien \"findreplace.frpl\", \"_in.txt\" und \"config.xml\" nach \"C:\\ProgramData\\findreplace\\\" kopiert.<br> <br> <br> Findreplace kann dann wie folgt gestartet werden:<br> <br> 1. Doppelklick auf *.frpl Steuer-Datei<br> <br> Wenn die Datei-Endung .frpl mit dem Findreplace-Programm verknüpft ist,<br> genügt ein Klick/Doppelklick im Datei-Explorer im jeweiligen Ordner auf die dort befindliche Datei Steuer-Datei. <br> <br> 2. Aus dem Startmenü:<br> <br> Es wird die Steuer-Datei \"C:\\ProgramData\\findreplace\\findreplace.frpl\" verwendet. Diese erwartet die Daten in \"C:\\ProgramData\\findreplace\\_in.txt\".<br> <br>  3. Per Batch-Datei.<br> <br> Beispiel:<br> Im Ordner \"c:\\ordner1\" seien die Dateien \"findreplace.frpl\", \"input.txt\" und die Batch-Datei \"fr.bat\" vorhanden. <br> In \"fr.bat\" ist der Aufruf von \"findreplace.exe\" wie folgt definiert:<br> <br>  <i> \"C:\\Program Files (x86)\\findreplace\\findreplace.exe\" findreplace.frpl (Hochkommas/Anführungszeichen sind wegen der Leerzeichen Pfadnamen notwendig) </i> oder falls \"C:\\Program Files (x86)\\findreplace\\\" im Windows-Path eingetragen wurde nur:<br> <br>  <i> findreplace.exe findreplace.frpl bzw. nur findreplace.exe da \"findreplace.frpl\" der Default-Name der Steuer-Datei ist.   </i> Allgemein: findreplace.exe Steuer-Dateiname (optional) Startparameter (optional)<br> <br> Um die Datei \"input.txt\" zu verarbeiten muss \"findreplace.frpl\" u.A. den Befehl \"source=input.txt\" enthalten (s.u.). <br><br>Um alle *.frpl Dateien in einem Ordner nacheinander auszuführen kann man eine Batch-Datei (z.B. \"_frpl_gen_all.bat\") mit folgendem Inhalt erstellen (findreplace.exe im Windows-Path):<br><br>for %%i in (\"*.frpl\") do findreplace %%i<br><br><br>Das Programm verwendet folgende Bibliotheken:<br><br><a href=\"http://www.scala-lang.org/\">Scala</a> Copyright &copy; 2013 École Polytechnique Fédérale de Lausanne (EPFL), Lausanne, Switzerland<br><a href=\"http://www.jfugue.org/\">jfugue</a> Copyright &copy; 2002 - 2012 David Koelle<br><br><br><h2>Installation Linux:</h2><br>\"findreplace_2.10-1.0.jar\", \"findreplace_liblinux.zip\", \"findreplace.sh\" und \"findreplace_install.sh runterladen.<br>Ein Root-Terminalfenster (oder su im Terminalfenster eingeben) im Download-Ordner öffnen.<br>Install-Script \"findreplace_install.sh\" ausführbar machen:bei Gnome: Rechtsklick -> Eingenschaften -> Zugriffsrechte -> Ausführen: Datei als Programm ausführenund ausführen (Doppelklick -> ausführen),<br>oder im Terminalfenster:<br>\"chmod o+x findreplace_install.sh\" und ausführen (\"./findreplace_install.sh\").<br>Installiert findreplace in den Ordner \"/home/findreplace/\" und <br>legt einen symbolischen Link in \"/usr/bin\" an.<br><br>Für die Funktion des Programms sind zusätzlich noch folgenden Dateien notwendig: \"_in.txt\" und \"findreplace.frpl\".<br>(Im \"Download Quellcode und Hilfsdateien\" enthalten).<br><br>(Siehe auch: Stream Editor \"sed\"!)<br><br><a name=\"beschreibung\">Programm-Beschreibung:</a><br><br> <h2>Aufbau der Steuer-Datei</h2> (bei allen Befehlen dürfen keine Leerzeichen hinter dem Gleichheitszeichen stehen):<br> Die Steuer-Datei wird von oben nach unten abgearbeitet.<br> Um mehrere Steuerdateien in einem Ordner abzuarbeiten, kann man unter Windows eine Batch-Datei mit folgender Befehls-Zeile verwenden:<br> <i> @for %%n in (*.frpl) do findreplace %%n </i>  <br>Tabelle der Steuer-Datei Befehle:<br>Alle Befehle immer am Zeilenanfang!<br><br>1. Datei-Befehle<table border=\"1\"><tr><td>Befehl</td><td>Parameter</td><td>Optional</td><td>Funktion</td><td>Bemerkung</td></tr><tr><td>source=</td><td>Pfad zur Quell-Datei (Source-File), Befehl nur einmal pro Steuerdatei.</td><td>nein</td><td>Sofern kein \"target=\" Befehl vorhanden ist, wird die Quell-Datei ohne Rückfrage überschrieben, aber vorher jeweils gesichert (Endung: Datum...  .tmp, ausser bei command=nobackup).</td><td>&nbsp;</td></tr><tr><td>sourceURL=</td><td>Quell-Datei (Source-File) wird von der URL gelesen, Befehl nur einmal pro Steuerdatei.</td><td>nein</td><td>Sofern kein \"target=\" Befehl vorhanden ist, wird \"fromURL.txt\" als Ziel-Datei angenommen.</td><td>ab Version 0.907. Es können nur \"UTF-8\"-kodierte Dateien gelesen werden (Kodierung ist fest!), natürlich ist dazu eine Internetverbindung notwendig... </td></tr><tr><td>target=</td><td>Pfad zur Zieldatei (Target-File), Befehl nur einmal pro Steuerdatei.</td><td>ja</td><td>Die Quell-Datei wird dann nicht verändert.<br>Die Zieldatei hat immer die gleiche Kodierung wie die Quelldatei.</td><td>Die Sicherung (Backup) erfolgt dann im Verzeichnis der Zieldatei.</td></tr><tr><td>command=</td><td>clipboard</td><td>ja</td><td>Die <b>Ein- und Ausgabe wird auf die Zwischenablage</b> umgestellt!<br>source= und target= werden dann ignoriert.<br></td><td>&nbsp;</td></tr><tr><td>command=</td><td>sound oder nosound</td><td>ja</td><td>Endesignal ein/aus.</td><td>&nbsp;</td></tr><tr><td>fileencoding=</td><td>Kodierung der Quell-Datei</td><td>nein</td><td>Parameter kann sein:<br \\> auto (schaltet automatisch zwischen UTF-8 und ISO-8859-1 um)US-ASCII (7-bit ASCII, keine Umlaute...)<br \\>ISO-8859-1 (Latin-1 ASCII mit Umlauten)<br \\></td><td>&nbsp;</td></tr></table>  [Im Notepad++ wird ISO8859-1 als ANSI bezeichnet...]).<br> <br>  2. Ablauf-Befehle<table border=\"1\"><tr><td>Befehl</td><td>Parameter</td><td>Optional</td><td>Funktion</td><td>Bemerkung</td></tr><tr><td>#</td><td>...</td><td>ja</td><td>Zeichen hinter dem Doppelkreuz bis zum Zeilenende sind Kommentare.</td><td>&nbsp;</td></tr><tr><td>command=</td><td>nobackup</td><td>ja</td><td>Es wird keine Backup-Datei erzeugt</td><td>&nbsp;</td></tr><tr><td>command=</td><td>autoexit</td><td>ja</td><td>Programm-Fenster wird nach Abarbeitung automatisch geschlossen</td><td>&nbsp;</td></tr><tr><td>command=</td><td>newline</td><td>ja</td><td>Bei \"*extract\"-Befehlen wird in der Ausgabe ein Zeilenvorschub angehängt.(Bei anderen Befehlen ist dies immer so).</td><td>&nbsp;</td></tr></table><br>3. Arbeits-Befehle<br>findXYZ= und replaceXYZ= müssen immer PAARWEISE vorhanden sein!<br><a href=\"#regextips\">Modifizierer: siehe Tips zu regulären Ausdrücken.</a><br><br>weitere folgen (bei Bedarf)...<br><br><table border=\"1\"><tr><td>Befehl</td><td>Parameter</td><td>Optional</td><td>Funktion</td><td>Bemerkung</td></tr><tr><td>find=</td><td><a href=\"http://www.danielfett.de/internet-und-opensource,artikel,regulaere-ausdruecke\" target=\"regaus\">regulärer Ausdruck.</a></td><td>ja</td><td>Ausdruck spezifiziert die Stellen, die ersetzt werden sollen.</td><td>Regex-Modifizierer s.o.</td></tr><tr><td>replace=</td><td>Ersatz-Text</td><td>ja</td><td>Gefundene Stellen des vorhergehenden regulären Ausdrucks in der Quell-Text-Datei werden durch den Ersatz-Text ersetzt.</td><td>Bezieht sich immer auf den vorhergehenden \"find=\"- Ausdruck.</td></tr><tr><td>before=</td><td>reiner Text</td><td>ja</td><td>wird vor den Anfang eingefügt</td><td>Einzel-Befehl. Mehrere \"before=\" Befehle in umgekehrter Reihenfolge anordnen, damit diese in der Ziel-Datei wieder stimmt!</td></tr><tr><td>behind=</td><td>reiner Text</td><td>ja</td><td>wird am Ende angefügt</td><td>Einzel-Befehl</td></tr></table><br> 4. Arbeits-Befehle Spezialversionen<table border=\"1\"><tr><td>Befehl</td><td>Parameter</td><td>Optional</td><td>Funktion</td><td>Bemerkung</td></tr><tr><td>findf=</td><td>regulärer Ausdruck</td><td>ja</td><td>Es wird nur wird nur das erstmalige Auftreten des Ausdrucks gesucht und ersetzt</td><td>&nbsp;</td></tr><tr><td>replacef=</td><td>Ersatz-Text</td><td>ja</td><td>f bedeutet \"first\"</td><td>&nbsp;</td></tr><tr><td>findc=</td><td>reiner Text</td><td>ja</td><td> 1. Es wird nach dem reinen Text gesucht ( nicht nach einem regulärem Ausdruck)<br> 2. Zusätzlich wird jeweils automatisch noch ein Zeilenumbruch am Zeilenende eingefügt.<br><td>&nbsp;</td></tr><tr><td>replacec=</td><td>Ersatz-Text</td><td>ja</td><td>c bedeutet Carriage Return</td><td>&nbsp;</td></tr><tr><td>findg1= </td><td>regulärer Ausdruck</td><td>ja</td><td>Der Inhalt der 1. Gruppe im regulären Ausdruck [Klammerausdruck z.B. (.*)] wird dem Platzhalter %s zugewiesen.</td><td>&nbsp;</td></tr><tr><td>replaceg1=</td><td>Ersatz-Text mit \"%s\" als Platzhalter für den Inhalt der 1. Gruppe</td><td>ja</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>findg2= </td><td>regulärer Ausdruck mit 2 Gruppen</td><td>ja</td><td>Die Inhalte der 1. und 2. Gruppe im regulären Ausdruck werden zwei Platzhaltern %s %s zugewiesen.<br> Sie können dann mit %s %s eingefügt werden.</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>replaceg2=</td><td>Ersatz-Text mit zwei \"%s\" als Platzhalter für die Inhalte der beiden Gruppen</td><td>ja</td><td>&nbsp;</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>findg2r= </td><td>regulärer Ausdruck mit 2 Gruppen, Reihenfolge im \"replace2r=\" aber vertauscht.</td><td>ja</td><td>Die Inhalte der 1. und 2. Gruppe im regulären Ausdruck werden zwei Platzhaltern %s %s zugewiesen.<br> Sie können dann mit %s %s eingefügt werden.</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>replaceg2r=</td><td>Ersatz-Text mit zwei \"%s\" als Platzhalter für die Inhalte der beiden Gruppen</td><td>ja</td><td>&nbsp;</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>findg3=</td><td>regulärer Ausdruck mit 3 Gruppen und einstellbarer Reihenfolge</td><td>ja</td><td>Die Inhalte der 1., 2. und 3. Gruppe im regulären Ausdruck werden zwei Platzhaltern %s %s %s zugewiesen.<br> Sie können dann mit %s %s %s eingefügt werden. Die Reihenfolge wird durch den weiteren Befehl \"g3format=\" festgelegt.</td><td>Zu diesem Befehl gehört neben \"replaceg3=\" auch noch \"g3format=\".</td></tr><tr><td>g3format=</td><td>Reihenfolge-Format.</td><td>ja</td><td>Mögliche Formate:<br> g3format123<br>g3format132<br>g3format213<br>g3format231<br>g3format312<br>g3format321<br>g3format111<br>g3format212<br>g3format121<br>g3format122<br></td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>replaceg3=</td><td>Ersatz-Text mit zwei \"%s\" als Platzhalter für die Inhalte der beiden Gruppen</td><td>ja</td><td>&nbsp;</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>findtl= bzw. findtu=</td><td>regulärer Ausdruck Gruppe</td><td>ja</td><td>findtl konvertiert die Gruppe in <b>Kleinbuchstaben</b>, entsprechend findtu in <b>Großbuchstaben</b>.</td><td>find-to-lower / find-to-upper</td></tr><tr><td>replacetl= bzw. replacetu=</td><td>Ersatz-Text mit \"%s\" als Platzhalter für den Inhalte der Gruppe</td><td>ja</td><td>&nbsp;</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</td></tr><tr><td>findcc=</td><td>regulärer Ausdruck</td><td>ja</td><td>Keine Gruppenfunktion!</td><td>find-camel-case</td></tr><tr><td>replacecc=</td><td>Ersatz-Text. Der erste Buchstabe des Ersatz-Textes wird in einen <b>Großbuchstaben</b> konvertiert.</td><td>ja</td><td>Keine Gruppenfunktion!</td><td>replace-camel-case</td></tr><tr><td>findeextract=</td><td>regulärer Ausdruck Gruppe</td><td>ja</td><td>Extrahiert die Gruppe.</td><td>Es werden jeweils nur die Inhalte der Gruppen in die Ziel-Datei übernommen.</br></td></tr><tr><td>writeextract=</td><td>Ersatz-Text mit \"%s\" als Platzhalter für den Inhalt der 1. Gruppe.</br>Die Ziel-Datei wird damit überschrieben, d.h. alle anderen Inhalte der Quell-Datei werden ignoriert!</td><td>ja</td><td>Jeweils eine Zeile für eine Fundstelle der Gruppe.</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</br>Alternativ: \"writeextractadd=\" s.u.</br>Werden extract-Befehle verwendet, sind andere Befehlstypen wirkungslos (ausser \"set=\"-Befehl),</br>da ja die Zieldatei dann nur den extrahierten Text beinhaltet.</br>Weitere Zeilen können nur noch mit \"behindextract=\" eingefügt werden.</td></tr><tr><td>writeextractadd=</td><td>Alternativer Befehl für \"writeextract=\". Ersatz-Text mit \"%s\" als Platzhalter für den Inhalt der 1. Gruppe.</br>Es werden jeweils nur die Inhalte der Gruppen (nur diese) an die Ziel-Datei angehängt.</br>Alle anderen Inhalte der Quell-Datei werden ignoriert!</td><td>ja</td><td>Jeweils eine Zeile für eine Fundstelle der Gruppe.</td><td>Das %-Zeichen ist in Gruppenfunktionen reserviert und kann dort nur als Platzhalter %s verwendet werden!</br>Im Target-File Reiter werden jeweils nur die neuen Daten angezeigt, nicht das gesamte Target-File!</br>Werden extract-Befehle verwendet, sind danach folgende, andere Befehlstypen wirkungslos (ausser \"set=\"-Befehl)!</br>Weitere Zeilen können nur noch mit \"behindextract=\" eingefügt werden.</td></tr><tr><td>replaceextractonly=</td><td>Befehl ist gepaart mit \"findeextract=\"</br>Vorläufige Beschreibung siehe oben \"Neues\"...</td><td>ja</td><td></td><td></td></tr><tr><td>writeextractdateformat=</td><td>Format im <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" target=\"sdf\">SimpleDateFormat</a></td><td>nein</td><td>Legt das Format für den danach folgenden \"writeextractdateadd=\"-Befehl fest.<br></td><td>Nur in Verbindung mit \"extract\"-Befehlen verwendbar.</td></tr><tr><td>writeextractdateadd=</td><td></td><td>ja</td><td>Fügt das durch \"writeextractdateformat=\" formatierte Tagesdatum/Uhrzeit ein.<br>Zuerst muss mit \"writeextractdateformat=\" das Format des Datums angegeben werden.</a>\"writeextractdateadd=\" schreibt dann das formatierte Datum und zwar an der mit \"%s\" gekennzeichneten Stelle.</br>Beispiel:</br>writeextractdateformat=dd.MM.yyyy</br>writeextractdateadd=Datum %s</br>Weiteres Beispiel siehe Neues Version: 0.920.</td><td>Nur in Verbindung mit \"extract\"-Befehlen verwendbar.</td></tr><tr><td>beforennl=</td><td>reiner Text</td><td>ja</td><td>wird vor den Anfang eingefügt, jedoch ohne Zeilenvorschub.</td><td>Einzel-Befehl  (nnl = no newline)</td></tr><tr><td>behindnnl=</td><td>reiner Text</td><td>ja</td><td>wird am Ende angefügt, jedoch ohne Zeilenvorschub.</td><td>Einzel-Befehl  (nnl = no newline)</td></tr><tr><td>beforeextract=</td><td>reiner Text</td><td>ja</td><td>wird vor den Anfang eingefügt nur in Verbindung mit findeextract= / writeextract[add]=</td><td>Einzel-Befehl, Text jeweils auf eigener Zeile</td></tr><tr><td>behindextract=</td><td>reiner Text</td><td>ja</td><td>wird am Ende angefügt nur in Verbindung mit findeextract= / writeextract[add]=</td><td>Einzel-Befehl, Text jeweils auf eigener Zeile</td></tr><tr><td>testname=</td><td>reiner Text</td><td>ja</td><td>Name des folgenden Tests.</td><td></td></tr><tr><td>testequals=</td><td>regulärer Ausdruck</td><td>ja</td><td>Es wird im gesamten Text nach dem Ausdruck gesucht. Wird er gefunden gilt der Test als bestanden.</td><td></td></tr><tr><td>counterreplace=, counterreplaceeven=, counterreplaceodd=</td><td>Ganzzahliger Startwert</td><td>ja</td><td>Es wird im gesamten Text nach \"%n%\" bzw. \"%even%\" bzw. \"%odd%\" gesucht und durch die Zeilennummer zzgl. dem Startwert, der auch negativ sein kann, bzw. dem Wort \"even / noteven\" bzw. \"odd / notodd\" ersetzt.Im Falle von even oder odd gibt der Startwert die Zeilennummer an, ab der ersetzt wird, kleinere Zeilen erhalten immer \"noteven\" bzw. \"notodd\".Dient z.B. zum Einfärben der Zeilen einer Tabelle mittels CSS. Even bzw. Odd Version ersetzt nur falls die Zeilennummer gerade bzw. ungerade ist.</td><td></td></tr></table>Das Programm wird jeweils nur einmal beim Starten ausgeführt!<br>D.h. nach Änderung der *.frpl-Datei muss es neu gestartet werden.<br><br>Anwendungsbeispiele s.u.<br><br> <lift:embed what=\"tools/_regex\"></lift:embed>Das Dollar-Zeichen ($) hat in replace= und testequals=-Ausdrücken keine besondere Bedeutung (keine Gruppenfunktion).<br><a href=\"http://www.regular-expressions.info/refadv.html\">Weitere Infos zu Regulären Ausdrücken (englisch).</a><br>Sollten bisher nicht erfasste Fehler auftreten, so wird einen Datei \"err.log\" erstellt!<br><br><br>  Optional: Programm-Startparameter:<br> Zusätzliche find= replace= Sequenzen (auch mehrere, aber nur die einfachen find/replace, also keine Sonderformen!).<br> Kann z.B. gut für den Aufruf über eine Batch-Datei verwendet werden.<br>  <br> \"set=\"-Befehl, siehe oben \"ab Version: 0.906 Variablen-Substitution in der Steuer-Datei\".<br> <br> Bedingungen bei Verwendung von Programm-Startparametern:<br> 1. Die Backslash-Zeichen im regulären Ausdruck hinter find= müssen durch doppelte Backslash-Zeichen ersetzt werden.<br> 2. Ausdrücke die Leerzeichen oder Windows-Kommandozeilen Steuerzeichen (also <, > usw.) enthalten sind in Hochkommas einzuschliessen<br> (Nach Hochkommas/Anführungszeichen kann dadurch nicht gesucht werden).<br><br><br>Menü \"File\":<br>Zum Starten eines externen Text-Editors ist die Datei editor.bat / editor.sh anzupassen!<br><br>Anmerkungen:<br>Unter Linux momentan ungetestet...<br>Linux Startscript(Java Runtime JVM erforderlich):<br><br>fr.sh<br><br><br><h2>GUI Konfiguration</h2>Die Datei \"config.xml\" dient der Konfiguration der Programmoberfläche.<br>Sie wird beim ersten Start im Ordner \"C:\\ProgramData\\findreplace\\\" erstellt, aber nicht überschrieben.<br>Ist eine Datei \"config.xml\" im aktuellen Startverzeichnis des Programms schon vorhanden, so wir diese verwendet.<br>Unter Linux wird ja nichs installiert, es wir dann die Datei aus dem aktuellen Verzeichnis gelesen.<br><br>\"config.xml\" anpassen:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">&lt;root>&lt;screen_position_x>0&lt;/screen_position_x>&lt;screen_position_y>0&lt;/screen_position_y>&lt;center_on_screen>false&lt;/center_on_screen>&lt;height_pixel>900&lt;/height_pixel>&lt;width_pixel>1024&lt;/width_pixel>&lt;sound>true&lt;/sound>&lt;checkversion>true&lt;/checkversion>&lt;silent>false&lt;/silent>&lt;/root></i><br>Die x,y-Position wird natürlich nur wirksam, wenn \"center_on_screen\" ausgeschaltet, also \"false\" ist.<br>Mit \"silent\" lässt sich das Programmfenster unterdrücken (außer im Fehlerfall).<br>\"checkversion\": Überprüfung auf neue Programmversion beim Programmstart.<br>Jeweils<br>true = einschalten<br>false = ausschalten<br><br>Findreplace Anwendungs-Beispiele:<br>(<b>Weitere Anwendungsbeispiele sind im nächsten Haupt-Abschnitt!)</b><br><br>1. Beispiel: Um alle (XML- bzw. HTML-) Tags im gesamten Text in Kleinschrift umzuwandeln, muss die Steuer-Datei folgenden Inhalt haben:<br><br><i>findtl=&lt;(.*?)>replacetl=&lt;%s></i>Wichtig: das Fragezeichen in (.*?), damit die Suche \"ungierig\" (non-greedy) wird!<br><br>2. Beispiel: Leezeichen entfernen<br><br>Ein Text enthält folgendes:<br><br><i>abc               def</i>Es sollen die Leezeichen entfernt werden.<br><br>Minimale Steuer-Datei dafür:<br>(Es kann \"C:\\ProgramData\\findreplace\\findreplace.frpl\" verwendet werden.)<br><br><i># In der 1.Zeile sind noch keine Befehle möglich (BUG!)command=clipboardfind= +replace=</i>Den Text in die Zwischenablage bringen.<br>Findreplace ausführen. Das Ergebnis sieht man im Reiter \"Target-File\" und in der Zwischenablage:<br><br><i>abcdef</i><br>3. Beispiel (mit \"findeextract\"):<br>Eine Datei \"robots.txt\" enthält folgenden Text:<br> <i>...modified-date: Thu, 29 May 2003 01:00:00 GMTmodified-by: ABCdatosrobot-id:                       acme-spiderrobot-name:                     Acme.Spiderrobot-cover-url:                http://www.acme.com/java/software/Acme.Spider.htmlrobot-details-url:              http://www.acme.com/java/software/Acme.Spider.html...</i>Es soll nur die robot-id extrahiert werden und daraus die XML-Datei (\"bots.xml\") im folgenden Format erstellt werden:<br><br> <i>&lt;root>...&lt;bot>acme-spider&lt;/bot>...&lt;/root></i>Das kann mit folgender Steuer-Datei erreicht werden:<br><br> <i>#command=autoexitcommand=nobackupsource=robots.txttarget=bots.xmlfileencoding=UTF-8findextract=robot-id:\\W*([\\w-]+)writeextract=&lt;bot>%s&lt;/bot>beforeextract=&lt;root>behindextract=&lt;/root></i>Andere Inhalte werden nicht in die Ziel-Datei übernommen, also sind andere find= / replace= Sequenzen in der Steuer-Datei bei \"*extract\"-Befehlen nicht sinnvoll.<br><br><br><h2>Weitere Beispiele:</h2><b>Beispiel zu findg2r/replaceg2r</b><br><br>Ich habe meine Firefox-Lesezeichen in einer HTML-Datei (als Startseite) gespeichert.<br>Das hat historische Gründe, ist aber auch sehr praktisch (leichte Übertragbarkeit auf andere Geräte usw.).<br><br>Dort haben sie das Format:<br>&lt;b>Seitenname:&lt;/b> URL&lt;br /><br>Beispiel:<br>&lt;b>Scalatest:&lt;/b> http://scalatest.org/&lt;br /><br>und sind mittels des Linkification ADD-ONs anklickbar.<br><br>Diese Datei möchte ich jetzt auch für Chrome verwenden.<br>Das erledigt mir folgende Findreplace-Steuerdatei:<br><br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">command=autoexitcommand=nobackupcommand=nosoundfile=firefox_start.htmltarget=chrome_start.htmlfileencoding=UTF-8# blank entfernenfind= http:replace=http:# href-Tag setzenfindg2r=&lt;b>(.*)&lt;/b>(.*)&lt;br />replaceg2r=&lt;a href=&quot;%s&quot;>%s&lt;/a>&lt;br /># blank entfernenfind= &lt;/a>replace=&lt;/a></i>mit der jeweils ein href-Tag eingesetzt wird, wobei die Spalten entsprechend getauscht werden(findg...r = reverse ).<br><br>Die Anzeige im Chrome-Browser entspricht aber noch nicht der bei Firefox.<br>Die folgende Steuerdatei macht die Anzeige unter Verwendung des \"findg3\"-Befehls weitgehend gleich:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\">command=autoexitcommand=nobackupcommand=nosoundfile=firefox_start.htmltarget=chrome_start.htmlfileencoding=UTF-8# blank entfernenfind= http:replace=http:# href-Tag setzenfindg3=&lt;b>(.*)&lt;/b>(.*)&lt;br />g3format=g3format122replaceg3=%s: &lt;a href=&quot;%s&quot;>%s&lt;/a>&lt;br /># blank entfernenfind= &lt;/a>replace=&lt;/a># blank entfernenfind= :replace=:#Umlautumwandlung fehlt noch...s.u.</i><b>Beispiel zu Umlaute/Sonderzeichen nach HTML konvertieren</b><br><br>Im Subprojekt \"xml_to_html\" wird mit der Steuerdatei \"xml_to_html.txt\" schon ein Teil erledigt,<br>allerdings werden damit keine Umlaute konvertiert, da dies für mich das verwendete Lift-Webframework erledigt,<br>bzw. es wird direkt die UTF-8 Zeichenkodierung verwendet.<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># Steuerdatei für findreplace## Copyright by jvr 2012#command=autoexitcommand=nobackupcommand=clipboardfileencoding=UTF-8find=&amp;replace=&amp;amp;find=&lt;replace=&amp;lt;find=&quot;replace=&amp;quot;find=&quot;replace=&amp;quot;#Umlautumwandlung könnte hier noch eingefügt werden#before=&lt;div>&lt;pre>#behind=&lt;/pre>&lt;/div># angepasst für# SyntaxHighlighter# http://alexgorbatchev.com/SyntaxHighlighterbefore=&lt;pre class=&quot;brush: scala; collapse: true; smart-tabs: true&quot;>behind=&lt;/pre></i><b>Umlaut-Umwandlung:</b><br><br>Die am häufigste vorkommenden Sonderzeichen im Deutschen sind:&auml;, &uuml;, &ouml;, &szlig;, &euro;Für diese und einige fremdsprachliche Sonderzeichen gibt es ja benannte Kodierungen in HTML.Alle anderen müssen durch die Angabe des Unicodes kodiert werden:<br>(es sei denn man verwendet UTF-8 und HTLM5)<br><a href=\"http://www.tamasoft.co.jp/en/general-info/unicode.html\" target=\"unicode\">Unicode Tabelle im Web</a><br>also:<br><pre class=\"brush: scala; collapse: true; smart-tabs: true\"># Benannte Sonderzeichenfind=Àreplace=&amp;Agrave;find=Áreplace=&amp;Aacute;find=Âreplace=&amp;Acirc;find=Ãreplace=&amp;Atilde;find=Äreplace=&amp;Auml;find=Åreplace=&amp;Aring;find=Æreplace=&amp;Aelig;find=Çreplace=&amp;Ccedil;find=Èreplace=&amp;Egrave;find=Éreplace=&amp;Eacute;find=Êreplace=&amp;Ecirc;find=Ëreplace=&amp;Euml;find=Ìreplace=&amp;Igrave;find=Íreplace=&amp;Iacute;find=Îreplace=&amp;Icirc;find=Ïreplace=&amp;Iuml;find=Ðreplace=&amp;ETH;find=Ñreplace=&amp;Ntilde;find=Òreplace=&amp;Ograve;find=Óreplace=&amp;Oacute;find=Ôreplace=&amp;Ocirc;find=Õreplace=&amp;Otilde;find=Öreplace=&amp;Ouml;find=Øreplace=&amp;Oslash;find=Ùreplace=&amp;Ugrave;find=Úreplace=&amp;Uacute;find=Ûreplace=&amp;Ucirc;find=Üreplace=&amp;Uuml;find=Ýreplace=&amp;Yacute;find=Þreplace=&amp;THORN;find=ßreplace=&amp;szlig;find=àreplace=&amp;agrave;find=áreplace=&amp;aacute;find=âreplace=&amp;acirc;find=ãreplace=&amp;atilde;find=äreplace=&amp;auml;find=åreplace=&amp;aring;find=æreplace=&amp;aelig;find=çreplace=&amp;ccedil;find=èreplace=&amp;egrave;find=éreplace=&amp;eacute;find=êreplace=&amp;ecirc;find=ëreplace=&amp;euml;find=ìreplace=&amp;igrave;find=íreplace=&amp;iacute;find=îreplace=&amp;icirc;find=ïreplace=&amp;iuml;find=ðreplace=&amp;eth;find=ñreplace=&amp;ntilde;find=òreplace=&amp;ograve;find=óreplace=&amp;oacute;find=ôreplace=&amp;ocirc;find=õreplace=&amp;otilde;find=öreplace=&amp;ouml;find=øreplace=&amp;oslash;find=ùreplace=&amp;ugrave;find=úreplace=&amp;uacute;find=ûreplace=&amp;ucirc;find=üreplace=&amp;uuml;find=ýreplace=&amp;yacute;find=þreplace=&amp;thorn;find=ÿreplace=&amp;yuml;find=€replace=&amp;euro;find=©replace=&amp;copy;find=®replace=&amp;reg;# oft verwendete Unicode codierte Sonderzeichenfind=ƒreplace=&amp;#131;find=„replace=&amp;#132;find=…replace=&amp;#133;find=†replace=&amp;#134;find=‡replace=&amp;#135;find=ˆreplace=&amp;#136;find=‰replace=&amp;#137;find=Šreplace=&amp;#138;find=‹replace=&amp;#139;find=Œreplace=&amp;#140;find=Žreplace=&amp;#142;find=‘replace=&amp;#145;find=’replace=&amp;#146;find=“replace=&amp;#147;find=”replace=&amp;#148;find=•replace=&amp;#149;find=–replace=&amp;#150;find=—replace=&amp;#151;find=˜ replace=&amp;#152;find=™replace=&amp;#153;find=šreplace=&amp;#154;find=›replace=&amp;#155;find=œreplace=&amp;#156;find=žreplace=&amp;#158;find=Ÿreplace=&amp;#159;find=¡replace=&amp;#161;find=¢replace=&amp;#162;find=£replace=&amp;#163;find=¤replace=&amp;#164;find=¥replace=&amp;#165;find=¦replace=&amp;#166;find=§replace=&amp;#167;find=¨replace=&amp;#168;find=ªreplace=&amp;#170;find=«replace=&amp;#171;find=¬replace=&amp;#172;find=­replace=&amp;#173;find=¯replace=&amp;#175;find=°replace=&amp;#176;find=±replace=&amp;#177;find=²replace=&amp;#178;find=³replace=&amp;#179;find=´replace=&amp;#180;find=µreplace=&amp;#181;find=¶replace=&amp;#182;find=·replace=&amp;#183;find=¸replace=&amp;#184;find=¹replace=&amp;#185;find=ºreplace=&amp;#186;find=»replace=&amp;#187;find=¼replace=&amp;#188;find=½replace=&amp;#189;find=¾replace=&amp;#190;find=¿replace=&amp;#191;find=×replace=&amp;#215;find=÷replace=&amp;#247;</i><!-- ################################################################################## --><a name=\"todo\"><h2><a href=\"#oben\">&uarr;</a>TODO / Ideen:</h2></a><ul><ul><li>Operationen über eine definierte Zahl von Zeilen = Zeilengruppen.</li><li>Auf JavaFx umstellen.</li><li>Auf Akka Actoren umstellen.</li><li class=\"done\">Programmstruktur Überarbeiten &rarr; erledigt.</li><li class=\"done\">Externe Dateien (Module) in Steuerdatei einbinden.</li><li class=\"done\">Befehl um eine Zahl zu erhöhen, z.B. \"Version 0.01\" in \"Version 0.02\" &rarr; erledigt, in Simped eingebaut!</li><li class=\"done\">Sound schaltbar als Command-Befehl &rarr; erledigt!</li><li class=\"done\">Source von URL statt Datei &rarr; erledigt!</li><li class=\"done\">Variablen-Substitution im Controlfile/Steuer-Datei &rarr; erledigt!</li><li class=\"done\">1. Zeile BUG &rarr; erledigt!</li><li class=\"done\">Gui Konfiguration &rarr; erledigt!</li><li class=\"done\">Extraktor &rarr; erledigt!</li><li class=\"done\">Umwandeln in Kleinbuchstaben / Großbuchstaben &rarr; erledigt!</li><li class=\"done\">Zwischenablage als Quelle / Ziel &rarr; erledigt!</li></ul><br><h2>Hinweise:</h2>Windows XP wird nicht unterstützt!<br><br>Für bidirektionale Umwandlungen eignet sich: <a href=\"http://www.seas.upenn.edu/~harmony/\" target=\"boomerang\">Boomerang</a> a bidirectional programming language for ad-hoc, textual data!<br><br><b>Versions-Historie:</b><ul><li>0.937: Programmstruktur überarbeitet. Default-Ordner und Dateiname der Konfigurationsdatei geändert.</li><li>0.936: Neu Befehle, Namen geändert in: \"writeextractg, writeextractgc, writeextractgadd, \"writeextractgaddc\" mit 9 möglichen Gruppen (%s1, %s2...%s9).</li><li>0.935: Neu Befehle \"writeextractg, writeextractgc, writeextractaddg, \"writeextractaddgc\" mit 9 möglichen Gruppen (%s1, %s2...%s9).</li><li>0.933: Verwendet Scala 2.11, aber noch Swing und Scala Actoren.</li><li>0.932: 4 neue g3formate: \"3format111\", \"g3format212\", \"g3format121\", \"g3format122\" erlaubt das Duplizieren von Gruppen.</li><li>0.931: Konfigurationsdateien-Ordner geändert (Ordner: \"C:\\Users\\NUTZER\\Documents\\PROGRAMNAME\" bzw. \"/var/NAME\"). Alte Konfigurationsdateien eventuell manuell löschen!</li><li>0.928 Umstellung auf Scala 2.xxxxxxxxxxxxxxxxxxxx, es wird aber weiterhin die alte Actor Bibliothek verwendet.</li><li>0.927 Konfigurations-Datei \"config.xml\" kann sich jetzt auch im Ordner aus dem \"Findreplace.exe\" gestartet wird befinden.<br>Neuer Parameter \"silent\" in der Konfigurations-Datei unterdrückt das Programmfenster.</li><li>0.926 Datei \"config.xml\" im Ordner \"C:\\ProgramData\\findreplace\\\" (nur Windows) wird jetzt automatisch erstellt, falls sie nicht vorhanden ist.</li><li>0.925 \"fr.sh\" ind \"findreplace.sh\" umbenannt, im Fehlerfall: Scrolldown und Tabauswahl.</li><li>0.924 Bugfixes.</li><li>0.923 Neuer Befehl \"findcc /replacecc\".</li><li>0.922 Befehle umbenannt \"writeextractdateformat\" / \"writeextractdateadd\"</li><li>0.921 Befehl: \"command=sound, \"command=nosound\". Bugfixes.</li><li>0.920 Befehl: \"writedateformat\" / \"writedateadd\".</li><li>0.919 Befehl: \"command=newline\" wieder entfernt, stattdessen 2 neue Befehle: \"writeextractc\" und \"writeextractaddc\", diese erzeugen jeweils auch einen Zeilenvorschub.</li><li>0.918 Neuer Befehl: \"command=newline\". Bei \"*extract\"-Befehlen wird in der Ausgabe ein Zeilenvorschub angehängt.</li><li>0.917 \"replaceextractonly=\" kann jetzt auch Inhalte die Regex-Zeichen enthalten korrekt einfügen.</li><li>0.916 writeextract %s jetzt immer auf neuer Zeile.</li><li>0.915 Target Bug beseitigt.</li><li>0.914 Clipboard Bug beseitigt.</li><li>0.913 Bugfixes.</li><li>0.912 Neuer Befehl: \"replaceextractonly=\".</li><li>0.911 Befehl \"replaceextract=\" in \"writeextract=\" umbenannt.</li><li>0.910 Zeilenende-Bug gefixt.</li><li>0.909 Neuer Befehl: \"replaceextractadd=\".</li><li>0.908 Neuer Steuer-Befehl: \"sourceURL=\". URL als Quelle.</li><li>0.907 Codeänderung: ECT auf List Tuple2[String, String] umgestellt um Simped Zeilennummern Mechanismus nutzen zu können.</li><li>0.906 Variablen-Substitution im Controlfile/Steuer-Datei.</li><li>0.905 Programm-Update-Automatik..BETA...Nicht kompatibel mit Versionen < 0.0905!</li><li>0.900 Bugfixes.</li><li>0.899 Bugfix: Default-Control-File/Steuer-Datei wird jetzt im aktuellen Ordner gesucht</li><li>0.898 Thread Korrektur</li><li>0.897 verschiedene Testdateien fertig.</li><li>0.896 Versionsabfrage beim Programmstart.</li><li>0.895 Testdatei überarbeitet.</li><li>0.894 Neue Hilfe.</li><li>0.893 testname= / testequals= zum einfachen Testen der Funktion.</li><li>0.892 Config-File ist jetzt direkt editierbar (autosave), Strg + Mousewheel = Fontsize ändern.</li><li>0.891 beforennl=, behindnnl=, Installer-Bugs beseitigt, erstellt jetzt Contextmenü-Eintrag.</li><li>0.890 Quellcode-Dateien umbenannt in findreplace_XY.scala.</li><li>0.888 Neues Control-Kommando: fileencoding=auto.</li><li>0.887 Commandfile kann jetzt auch ISO8859-1 kodiert sein, wird automatisch erkannt.</li><li>0.886 Bei command=autoexit ertönt als Ende-Signal nur ein kurzer Beep anstelle der 3 Signaltöne.</li><li>0.885 Eintrag unter \"File\" zum Editieren der Config-Datei mit externem Editor.</li><li>0.884 Tonsignale zugefügt.</li><li>0.882 \"config.xml\"-Datei für GUI Einstellungen.</li><li>0.88 Neue Kommandos: findeextract, replaceextract, beforeextract, behindextract.</li><li>0.87 GUI überarbeitet, Kommandos verbose, silent und noprint entfallen.</li><li>0.86 GUI Editor Aufrufe, Source-Datei-Anzeige, statt file= sollte jetzt source= in der Steuer-Datei verwendet werden.</li><li>0.85 GUI überarbeitet, neue Programmstruktur (intern).</li><li>0.82 GUI überarbeitet, Parameter-Bug entfernt.</li><li>0.81 GUI überarbeitet, Setup*.bat-Dateien umbenannt, Doppelte Dateien im Download entfernt.</li><li>0.8 Eclipse Bug behoben.</li><li>0.79 XMLtoHTML_SETUP.bat.</li><li>0.78 Umwandeln in Kleinschrift.</li><li>0.77 Zwischenablage als Quelle / Ziel.</li><li>0.76 Auswertung der Startparameter korrigiert.</li><li>0.751 Bugfixes Datei fr.sh (für Linux) korrigiert.</li><li>0.75 Bugfixes.</li><li>0.74 findg3 / g3format /  replaceg3 3 Gruppen, g3format gibt die Reihenfolge an, also z.B.: g3format=g3format123 oder g3format=g3format321 oder g3format=g3format231 usw.g3format= muss VOR replaceg3= stehen, default ist: g3format=g3format123.</li><li>0.73 findg2r / replaceg2r  2 Gruppen, werden aber beim Replace in der Reihenfolge vertauscht!</li><li>0.72 Bugfixes.</li><li>0.71 Bugfixes.</li></ul><br><b>Hilfsprogramm: \"all_sources.exe\"</b> jetzt in eigenem Abschnitt<br></html>"
}